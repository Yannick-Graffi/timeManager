{
  "swagger": "2.0",
  "info": {
    "description": "API Documentation for Time Manager v1",
    "version": "1.0",
    "title": "Time Manager API"

  },
  "host": "localhost:4000",
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "Bearer": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "description": "API Token must be provided via `Authorization: Bearer ` header"
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "User resources"
    }, {
      "name": "clocks",
      "description": "Clocks resources"
    }, {
      "name": "working times",
      "description": "Working Times resources"
    }
  ],
  "paths": {
    "/users/{userID}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get one user by ID",
        "description": "This can only be done by the logged in user.",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Edit user by ID",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Body request of user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "404": {
            "description": "Not found"
          }, "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user by ID",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Not content",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      }
    }, "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get one user by email and username",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email of user that needs to be fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username of user that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "400": {
            "description": "Bad request"
          }, "404": {
            "description": "Not found"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user resource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    }
  },
  "definitions": {
    "UserRequest": {
      "type": "object",
      "properties": {
        "user" : {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "john.doe@mail.com"
            },
            "username": {
              "type": "string",
              "example": "JohnDoe615"
            },
            "password": {
              "type": "string",
              "example": "ZO7so82eù0EK3çkef"
            }
          }
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "data" : {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "username": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        }
      }
    },
    "Clock": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "times": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Clock"
      }
    },
    "Working Time": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}