{
  "swagger": "2.0",
  "info": {
    "description": "API Documentation for Time Manager v1",
    "version": "1.0",
    "title": "Time Manager API"

  },
  "host": "localhost:4000",
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "JWT": []
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Register / Login / Logout"
    }, {
      "name": "users",
      "description": "User resources"
    }, {
      "name": "clocks",
      "description": "Clocks resources"
    }, {
      "name": "working times",
      "description": "Working Times resources"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register a user",
        "description": "Register a user (employee) with email, username and password",
        "operationId": "register",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "UserInformations",
            "in": "body",
            "description": "Informations of the new user",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "Example"
                },
                "email": {
                  "type": "string",
                  "example": "example@mail.com"
                },
                "password": {
                  "type": "string",
                  "example": "a!+pz5efU9?z8g2^:3L"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          }, "400": {
            "description": "Bad request"
          }, "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login a user",
        "description": "Login a user with credentials",
        "operationId": "login",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "UserCredentials",
            "in": "body",
            "description": "Credentials of the new user",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "molestie2.sodales@hotmail.couk"
                },
                "password": {
                  "type": "string",
                  "example": "azerty"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          }, "400": {
            "description": "Bad request"
          }, "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "Logout a user",
        "description": "Logout a user",
        "operationId": "logout",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful"
          }, "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/{userID}": {
      "get": {
        "tags": ["users"],
        "summary": "Get one user by ID",
        "description": "",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Edit user by ID",
        "description": "",
        "operationId": "editUserById",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Body request of user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "404": {
            "description": "Not found"
          }, "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user by ID",
        "description": "",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Not content",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      }
    }, "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get one user by email and username",
        "description": "",
        "operationId": "getUserByEmailAndUsername",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email of user",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username of user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "400": {
            "description": "Bad request"
          }, "404": {
            "description": "Not found"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user resource",
        "description": "",
        "operationId": "createUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Body request of user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }, "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    }, "/workingTimes/{ID}": {
      "get": {
        "tags": [
          "working times"
        ],
        "summary": "Get all workingtimes by user between date range",
        "description": "Get a list of working times specifying the user ID and the start datetime and end datetime.",
        "operationId": "getWorkingTimeByUserStartAndEnd",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }, {
            "name": "start",
            "in": "query",
            "description": "Start of working time",
            "required": true,
            "type": "string"
          }, {
            "name": "end",
            "in": "query",
            "description": "End of working time",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/WorkingTimeResponse"
            }
          }, "400": {
            "description": "Bad request"
          }, "404": {
            "description": "Not found"
          }
        }
      }, "post": {
        "tags": [
          "working times"
        ],
        "summary": "Create working time by user ID",
        "description": "Create a working time specifying the user ID.",
        "operationId": "createWorkingTimeByUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }, {
            "in": "body",
            "name": "body",
            "description": "Body request of working time",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkingTimeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/WorkingTimeResponse"
            }
          }, "422": {
            "description": "Unprocessable Entity"
          }, "404": {
            "description": "Not found"
          }
        }
      }, "put": {
        "tags": [
          "working times"
        ],
        "summary": "Edit working time by ID",
        "description": "Edit a working time specifying the working time ID.",
        "operationId": "editWorkingTimeById",
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "ID of working time",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }, {
            "in": "body",
            "name": "body",
            "description": "Body request of working time",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkingTimeWithUserIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/WorkingTimeResponse"
            }
          }, "404": {
            "description": "Not found"
          }, "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": [
          "working times"
        ],
        "summary": "Delete working time by ID",
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "ID of working time",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Not content",
            "schema": {
              "$ref": "#/definitions/WorkingTimeResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      }
    }, "/workingTimes/{userID}/{workingTimeID}": {
      "get": {
        "tags": [
          "working times"
        ],
        "summary": "Get one working time by user ID and working time ID",
        "description": "",
        "operationId": "getWorkingTimeByUserIdAndWorkingTimeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }, {
            "name": "workingTimeID",
            "in": "path",
            "description": "ID of working time",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/WorkingTimeResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      }
    }, "/clocks/{userID}": {
      "get": {
        "tags": [
          "clocks"
        ],
        "summary": "Get clocks by user ID",
        "description": "Get list of clocks by specifying the user ID",
        "operationId": "getClocksByUser",
        "produces": [
          "application/json"
        ],
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/ClockResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      }, "post": {
        "tags": [
          "clocks"
        ],
        "summary": "Create clock by user ID",
        "description": "No body required. The status is inverse of last status value and the time is currrent datetime.",
        "operationId": "createClocksByUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/ClockResponse"
            }
          }, "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "definitions": {
    "UserRequest": {
      "type": "object",
      "properties": {
        "user" : {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "john.doe@mail.com"
            },
            "username": {
              "type": "string",
              "example": "JohnDoe615"
            },
            "password": {
              "type": "string",
              "example": "ZO7so82eù0EK3çkef"
            }
          }
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "data" : {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "username": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        }
      }
    },
    "ClockRequest": {
      "type": "object",
      "properties": {
        "clock" : {
          "type" : "object",
          "properties" : {
            "times": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "type": "boolean"
            }
          }
        }
      },
      "xml": {
        "name": "Clock"
      }
    }, "ClockResponse": {
      "type": "object",
      "properties": {
        "data" : {
          "type" : "object",
          "properties" : {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "times": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "type": "boolean"
            }
          }
        }
      },
      "xml": {
        "name": "Clock"
      }
    },"WorkingTimeRequest": {
      "type": "object",
      "properties": {
        "working_time": {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "format": "date-time",
              "example": "2022-10-25 10:35:00"
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "example": "2023-10-25 10:35:00"
            }
          }
        }
      }
    }, "WorkingTimeWithUserIdRequest": {
      "type": "object",
      "properties": {
        "working_time": {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "format": "date-time",
              "example": "2022-10-25 10:35:00"
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "example": "2023-10-25 10:35:00"
            },
            "user_id": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    }, "WorkingTimeResponse": {
      "type": "object",
      "properties": {
        "data" : {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "start": {
              "type": "string",
              "format": "date-time"
            },
            "end": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}